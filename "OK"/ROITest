from __future__ import print_function
import numpy as np
import cv2
import matplotlib.pyplot as plt
import math
from tqdm import tqdm

ORIGINAL_WINDOW_TITLE = 'Original'
FIRST_FRAME_WINDOW_TITLE = 'First Frame'
CANNY_WINDOW_TITLE = 'Canny'

canvas = None
drawing = False # true if mouse is pressed

#Retrieve first frame
def initialize_camera(cap):
    for i in range(0,60): #Skip first 60 frames
        _, frame = cap.read()
    return frame

def nothing(*arg):
        pass

# mouse callback function
def mouse_draw_rect(event,x,y,flags, params):
    global drawing, canvas
    
    if drawing:
        canvas = params[0].copy()

    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        params.append((x,y)) #Save first point

    elif event == cv2.EVENT_LBUTTONUP:
     if drawing:
        drawing = False
        params.append((x, y))  # Save second point
        cv2.rectangle(canvas, params[1], (x, y), (0, 255, 0), 2)

def select_roi(frame):
    global canvas
    canvas = frame.copy()
    params = [frame]
    ROI_SELECTION_WINDOW = 'Select ROI'
    cv2.namedWindow(ROI_SELECTION_WINDOW, cv2.WINDOW_KEEPRATIO)
    cv2.setMouseCallback(ROI_SELECTION_WINDOW, mouse_draw_rect, params)
    roi_selected = False
    while True:
        cv2.imshow(ROI_SELECTION_WINDOW, canvas)
        key = cv2.waitKey(10)

        #Press Enter to break the loop
        if key == 13:
            break;
    
    cv2.destroyWindow(ROI_SELECTION_WINDOW)
    roi_selected = (3 == len(params))

    if roi_selected:
        p1 = params[1]
        p2 = params[2]
        if (p1[0] == p2[0]) and (p1[1] == p2[1]):
            roi_selected = False

    #Use whole frame if ROI has not been selected
    if not roi_selected:
        print('ROI Not Selected. Using Full Frame')
        p1 = (0,0)
        p2 = (frame.shape[1] - 1, frame.shape[0] -1)

    return roi_selected, p1, p2


def canny(image, thrs1, thrs2):
    image_grayscale = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    image_grayscale_blurred = cv2.GaussianBlur(image_grayscale, (7,7), 0)
    image_canny = cv2.Canny(image_grayscale_blurred, thrs1, thrs2, apertureSize=7)
    return image_canny


if __name__ == '__main__':

    cap = cv2.VideoCapture("/home/max/Videos/testCam/WoodTest4.avi")

    #Grab first frame
    first_frame = initialize_camera(cap)

    #Select ROI for processing. Hit Enter after drawing the rectangle to finalize selection
    roi_selected, point1, point2 = select_roi(first_frame)    

    #Grab ROI of first frame
    first_frame_roi = first_frame[point1[1]:point2[1], point1[0]:point2[0], :]

    #An empty image of full size just for visualization of difference
    canny_image = np.zeros_like(first_frame)
   
    cv2.namedWindow(FIRST_FRAME_WINDOW_TITLE,cv2.WINDOW_KEEPRATIO)
    cv2.namedWindow(ORIGINAL_WINDOW_TITLE,cv2.WINDOW_KEEPRATIO)
    cv2.namedWindow(CANNY_WINDOW_TITLE,cv2.WINDOW_KEEPRATIO)

    cv2.createTrackbar('thrs1', CANNY_WINDOW_TITLE, 8000, 15000, nothing)
    cv2.createTrackbar('thrs2', CANNY_WINDOW_TITLE, 10000, 15000, nothing)

    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    progress_bar = tqdm(total=total_frames, unit='frame', desc='Processing')
    
    while cap.isOpened():

        ret, frame = cap.read()

        if ret:

            #ROI of current frame
            roi = frame[point1[1]:point2[1], point1[0]:point2[0], :]

            thrs1 = cv2.getTrackbarPos('thrs1', CANNY_WINDOW_TITLE)
            thrs2 = cv2.getTrackbarPos('thrs2', CANNY_WINDOW_TITLE)
            difference = cv2.absdiff(first_frame_roi, roi)
            edge = canny(roi, thrs1, thrs2)
            canny_image[point1[1]:point2[1], point1[0]:point2[0], :] = np.stack([edge]*3, axis=-1)
            
            cv2.imshow(FIRST_FRAME_WINDOW_TITLE, first_frame)
            cv2.imshow(ORIGINAL_WINDOW_TITLE, frame)
            cv2.imshow(CANNY_WINDOW_TITLE, edge)

            progress_bar.update(1)

            key = cv2.waitKey(30) & 0xff
            if key == 27:
                break
        else:
            break

    cap.release()
    progress_bar.close()
    cv2.destroyAllWindows()